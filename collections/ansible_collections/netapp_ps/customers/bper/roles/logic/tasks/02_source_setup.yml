##########################################################################
#
# - find suitable SVM for the volume
# 
#
# 
# Alexey Mikhaylov
# NetApp Deutschland GmbH
# Professional Services 2024
##########################################################################

---
- name: "Source SVM finder"
  block:
    - name: Set cluster credentials
      ansible.builtin.set_fact:
        auth: &auth
          username:        "{{ ontap_username | default(omit) }}"
          password:        "{{ ontap_password | default(omit) }}"
          validate_certs:  "{{ auth_rest_validate_certs | default(false) }}"
          use_rest:        always
          use_python_keys: true
      no_log: true

    ########## Collecting volume count for all source candidate SVMs
    # across the list of clusters with aggregates of supported type
    - name: Get volume count for all source candidate SVMs
      netapp.ontap.na_ontap_rest_info:
        <<: *auth
        gather_subset:
          - volume_info
        parameters:
          svm.name: "{{ svm.name }}"
        fields:
          - name
        hostname: "{{ svm.cluster_mgmt }}"
      register: svms_volcount
      loop: "{{ inventory_svms_mcc.hosts }}"
      loop_control:
        loop_var: svm
        label: svm
      no_log: "{{ nolog }}"
      # we look only at SVMs on clusters with supported aggregates
      when: svm.cluster_mgmt in aggr_supported_inventory

    - debug: 
        msg: "Clusters inventory with supported aggregates of type {{ vars_local.source.volume.snaplock.type }}: {{ aggr_supported_inventory }}"
    - ansible.builtin.assert:
        that:
          - aggr_supported_inventory | length > 0
        msg: "No clusters found with supported aggregates. Exiting. Check cluster inventory."

    ########## Building a list of source SVMs with volume count and it's hosting cluster to sort
    - name: Collect volume count on source SVMs
      ansible.builtin.set_fact:
        data_svm_volcount_list: "{{ data_svm_volcount_list | default([]) + [ {
        'name':         svm.svm.name,
        'cluster_mgmt': svm.svm.cluster_mgmt,
        'cluster_name': svm.svm.cluster_name,
        'count':        svm.ontap_info.storage_volumes.num_records      
        } ] }}"
      loop: "{{ svms_volcount.results }}"
      loop_control:
        loop_var: svm
        label: svm
      no_log: "{{ nolog }}"
      when:
        - svm.ontap_info is defined
   
    - name: Define most suiting source SVM details by vol count
      ansible.builtin.set_fact:
        target_svm: "{{ data_svm_volcount_list | sort(attribute='count') | first }}"
 
    - name: Set list of supported aggregates for source SVM 
      set_fact:
        svm_aggr_supported_list: "{{ aggregates_supported.results| selectattr('cluster_ip', '==', target_svm.cluster_mgmt)|map(attribute='ontap_info.storage_aggregates.records') |flatten|map(attribute='name') |list }}"
    
    - debug: var=svm_aggr_supported_list
    - fail:
        msg: "Target SVM does not support any aggregates of requested Snaplock type. Exiting. Check SVM configuration."
      when: svm_aggr_supported_list | length == 0

    - name: Defining target source SVM - vars_local facts
      ansible.builtin.set_fact:
        vars_local_update:
          source:
            svm:
              name:          "{{ target_svm.name }}"
              supported_aggregates:    "{{ svm_aggr_supported_list }}"
            cluster:
              name:          "{{ target_svm.cluster_name }}"
              management_ip: "{{ target_svm.cluster_mgmt }}"

    - name: Merging logic local facts with vars_local
      ansible.builtin.set_fact:
        vars_local: "{{ vars_local | default({}) | combine(vars_local_update, recursive=true)}}"
    
  when: inventory_svms_mcc.keys() | length > 0
...